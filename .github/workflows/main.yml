name: CI

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: '${{ steps.nvm.outputs.NVMRC }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install:ci

      - name: Build
        run: yarn build
        
      - name: "Copy node build artifacts to production server 1"
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST_1_PROD }}
          username: ${{ secrets.SSH_USERNAME_PROD }}
          key: ${{ secrets.DEPLOYMENT_KEY_PROD }}
          port: ${{ secrets.SSH_PORT_PROD }}
          source: "./nodes/persistence-node/bin,./nodes/persistence-node/node_modules,./nodes/ens-contenthash-indexer-node/bin,./nodes/ens-contenthash-indexer-node/node_modules"
          target: "/home/ubuntu/staging/polywrap/nodes"
      
      - name: "Copy node build artifacts to production server 2"
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST_2_PROD }}
          username: ${{ secrets.SSH_USERNAME_PROD }}
          key: ${{ secrets.DEPLOYMENT_KEY_PROD }}
          port: ${{ secrets.SSH_PORT_PROD }}
          source: "./nodes/persistence-node/bin,./nodes/persistence-node/node_modules,./nodes/ens-contenthash-indexer-node/bin,./nodes/ens-contenthash-indexer-node/node_modules"
          target: "/home/ubuntu/staging/polywrap/nodes"

      - name: "Copy node build artifacts to production server 3"
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST_3_PROD }}
          username: ${{ secrets.SSH_USERNAME_PROD }}
          key: ${{ secrets.DEPLOYMENT_KEY_PROD }}
          port: ${{ secrets.SSH_PORT_PROD }}
          source: "./nodes/persistence-node/bin,./nodes/persistence-node/node_modules,./nodes/ens-contenthash-indexer-node/bin,./nodes/ens-contenthash-indexer-node/node_modules,./nodes/ens-text-record-indexer/bin,./nodes/ens-text-record-indexer/node_modules"
          target: "/home/ubuntu/staging/polywrap/nodes"

      - name: Deploy nodes to production server 1
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.SSH_HOST_1_PROD }}
            username: ${{ secrets.SSH_USERNAME_PROD }}
            key: ${{ secrets.DEPLOYMENT_KEY_PROD }}
            port: ${{ secrets.SSH_PORT_PROD }}
            script: |
              curl -o- https://raw.githubusercontent.com/polywrap/nodes/main/deployment/prod/update.sh | bash

      - name: Deploy nodes to production server 2
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.SSH_HOST_2_PROD }}
            username: ${{ secrets.SSH_USERNAME_PROD }}
            key: ${{ secrets.DEPLOYMENT_KEY_PROD }}
            port: ${{ secrets.SSH_PORT_PROD }}
            script: |
              curl -o- https://raw.githubusercontent.com/polywrap/nodes/main/deployment/prod/update.sh | bash

      - name: Deploy nodes to production server 3
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.SSH_HOST_3_PROD }}
            username: ${{ secrets.SSH_USERNAME_PROD }}
            key: ${{ secrets.DEPLOYMENT_KEY_PROD }}
            port: ${{ secrets.SSH_PORT_PROD }}
            script: |
              curl -o- https://raw.githubusercontent.com/polywrap/nodes/main/deployment/prod/update.sh | bash